# ISAAC COMPUTER SCIENCE LIVE
server {
    listen 443 ssl http2;

    server_name isaaccomputerscience.org;

    set $env live;

    include conf/headers-default.conf;
    include conf/headers-proxy.conf;
    include conf/headers-isaac-cs-content-security-policy.conf;

    location = /.well-known/change-password {
        return 302 https://isaaccomputerscience.org/account#passwordreset;
    }

    location /api {
        proxy_read_timeout 900s;
        proxy_cookie_path /isaac-api /;

        # Add WebSocket support:
        include conf/headers-websocket.conf;
        include conf/headers-proxy.conf;

        if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
          proxy_pass http://cs-api-$env-$1:8080/isaac-api/$2;
        }
    }

    location / {
        # Enable compression of static assets:
        gzip on;

        # Force runtime resolution by using a variable. That way,
        # app-<env> doesn't have to be running when we start nginx
        proxy_pass http://cs-app-$env;
    }

    include conf/location-isaac-cs-errors.conf;
    include conf/location-robots-txt.conf;
}


# ISAAC COMPUTER SCIENCE WWW. AND MISSPELLING Redirect
server {
    listen 443 ssl http2;
    server_name www.isaaccomputerscience.org beta.isaaccomputerscience.org live.isaaccomputerscience.org www.isaacomputerscience.org isaacomputerscience.org;
    return 301 https://isaaccomputerscience.org$request_uri;
}


# ISAAC COMPUTER SCIENCE SHORT URLs
server {
    listen 443 ssl http2;

    server_name isaaccs.org www.isaaccs.org;

    include conf/headers-default.conf;

    location /q/ {
        rewrite ^/q/(.*)$ https://isaaccomputerscience.org/questions/$1 permanent;
    }

    location /bq/ {
        rewrite ^/bq/(.*)$ https://isaaccomputerscience.org/questions/$1?utm_source=book&utm_medium=book&utm_campaign=workbook_link;
    }

    location /c/ {
        rewrite ^/c/(.*)$ https://isaaccomputerscience.org/concepts/$1 permanent;
    }

    location /p/ {
        rewrite ^/p/(.*)$ https://isaaccomputerscience.org/pages/$1 permanent;
    }

    location /t/ {
        rewrite ^/t/(.*)$ https://isaaccomputerscience.org/topics/$1 permanent;
    }

    location /e/ {
        rewrite ^/e/(.*)$ https://isaaccomputerscience.org/events/$1 permanent;
    }

    location /a/ {
        rewrite ^/a/(.*)$ https://isaaccomputerscience.org/assignment/$1 permanent;
    }

    location /g/ {
        rewrite ^/g/(.*)$ https://isaaccomputerscience.org/gameboards#$1 permanent;
    }

    location /join/ {
        rewrite ^/join/(.*)$ https://isaaccomputerscience.org/account?authToken=$1 permanent;
    }

    location / {
        return 301 https://isaaccomputerscience.org$request_uri;
    }

}


# ISAAC COMPUTER SCIENCE STAGING & DEV
server {
    listen 443 ssl http2;

    server_name  ~(?<env>dev|staging)\.isaaccomputerscience\.org$;

    include conf/internal-ips-only.conf;
    include conf/ssl-dev-servers.conf;
    include conf/headers-default.conf;
    include conf/headers-proxy.conf;
    include conf/headers-isaac-cs-content-security-policy.conf;

    location /api/ {
        proxy_read_timeout 900s;
        proxy_cookie_path /isaac-api /;

        # Add WebSocket support:
        include conf/headers-websocket.conf;
        include conf/headers-proxy.conf;

        if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
            proxy_pass http://cs-api-$env-$1:8080/isaac-api/$2;
        }
    }

    location / {
        # Enable compression of static assets:
        gzip on;

        # Force runtime resolution by using a variable. That way,
        # app-<env> doesn't have to be running when we start nginx
        proxy_pass http://cs-app-$env;
    }

    include conf/location-isaac-cs-errors.conf;

}


# ISAAC COMPUTER SCIENCE TEST
server {
    listen 443 ssl http2;

    server_name  test.isaaccomputerscience.org;

    include conf/internal-ips-only.conf;
    include conf/ssl-dev-servers.conf;
    include conf/headers-default.conf;
    include conf/headers-proxy.conf;
    include conf/headers-isaac-cs-content-security-policy.conf;

    location /api/ {
        proxy_read_timeout 900s;
        proxy_cookie_path /isaac-api /;

        # Add WebSocket support:
        include conf/headers-websocket.conf;
        include conf/headers-proxy.conf;

        if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
            proxy_pass http://cs-api-test-any:8080/isaac-api/$2;
        }

    }

    location / {
        # Enable compression of static assets:
        gzip on;

        # Force runtime resolution by using a variable. That way,
        # app-<env> doesn't have to be running when we start nginx
        set $env test;
        proxy_pass http://cs-app-$env;
    }

    include conf/location-isaac-cs-errors.conf;
    
    error_page 502 504 /isaac_cs_test_error.html;
    location = /isaac_cs_test_error.html {
        root   /usr/share/nginx/html;
    }
}


# ISAAC COMPUTER SCIENCE TICKETS
server {
    listen 443 ssl http2;
    server_name tickets.isaaccomputerscience.org;

    include conf/internal-ips-only.conf;
    include conf/ssl-dev-servers.conf;
    include conf/headers-proxy.conf;

    location / {
        set $osticket isaac-cs-tickets;
        proxy_pass http://$osticket;
    }

    include conf/location-isaac-cs-errors.conf;
}
