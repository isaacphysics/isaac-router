# ISAAC COMPUTER SCIENCE LIVE
server {
    listen 443 ssl http2;

    server_name isaaccomputerscience.org live.isaaccomputerscience.org;

    include conf/headers-proxy.conf;

    location = /events {
        return 302 https://isaaccomputerscience.eventbrite.com;
    }

    location / {
        return 302 https://raspberrypifoundation.typeform.com/to/oWOVo3;
    }

    include conf/location-isaac-cs-error.conf;
}


# ISAAC COMPUTER SCIENCE BETA (WILL-BE-LIVE)
server {
    listen 443 ssl http2;

    server_name beta.isaaccomputerscience.org;

    set $env live;

    include conf/headers-default.conf;
    include conf/headers-proxy.conf;
    include conf/headers-isaac-cs-content-security-policy.conf;

    location /api {
        proxy_read_timeout 900s;
        proxy_cookie_path /isaac-api /;

        # Add WebSocket support:
        include conf/headers-websocket.conf;
        include conf/headers-proxy.conf;

        if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
          proxy_pass http://cs-api-$env-$1:8080/isaac-api/$2;
        }
    }

    location / {
        # Enable compression of static assets:
        gzip on;

        # Force runtime resolution by using a variable. That way,
        # app-<env> doesn't have to be running when we start nginx
        proxy_pass http://cs-app-$env;
    }

    include conf/location-isaac-cs-error.conf;

    location = /robots.txt {
        add_header Cache-Control "public, max-age=86400";
        root /usr/share/nginx/html;
    }

}


# ISAAC COMPUTER SCIENCE WWW. AND MISSPELLING Redirect
server {
    listen 443 ssl http2;
    server_name www.isaaccomputerscience.org www.isaacomputerscience.org isaacomputerscience.org;
    return 301 https://isaaccomputerscience.org$request_uri;
}


# ISAAC COMPUTER SCIENCE ALPHA
server {
    listen 443 ssl http2;

    server_name alpha.isaaccomputerscience.org;
    set $env alpha;

    include conf/internal-ips-only.conf;
    include conf/headers-default.conf;
    include conf/headers-proxy.conf;
    include conf/headers-isaac-cs-content-security-policy.conf;

    location /api/ {
        proxy_read_timeout 900s;
        proxy_cookie_path /isaac-api /;

        # Add WebSocket support:
        include conf/headers-websocket.conf;
        include conf/headers-proxy.conf;

        if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
            proxy_pass http://cs-api-$env-$1:8080/isaac-api/$2;
        }
    }

    location / {
        # Enable compression of static assets:
        gzip on;

        # Force runtime resolution by using a variable. That way,
        # app-<env> doesn't have to be running when we start nginx
        proxy_pass http://cs-app-$env;
    }

    include conf/location-isaac-cs-error.conf;

}


# ISAAC COMPUTER SCIENCE TEMPORARY STAGING2
#server {
#    listen 443 ssl http2;
#
#    server_name staging-2.isaacphysics.org;
#
#    ssl_certificate      /letsencrypt/live/staging-2.isaacphysics.org/fullchain.pem;
#    ssl_certificate_key  /letsencrypt/live/staging-2.isaacphysics.org/privkey.pem;
#
#    include conf/internal-ips-only.conf;
#    include conf/headers-proxy.conf;
#
#    location /api/ {
#        proxy_read_timeout 900s;
#        proxy_cookie_path /isaac-api /;
#
#        # Add WebSocket support:
#        include conf/headers-websocket.conf;
#        include conf/headers-proxy.conf;
#
#        if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
#            proxy_pass http://cs-api-staging2-$1:8080/isaac-api/$2;
#        }
#    }
#
#    location / {
#        # Enable compression of static assets:
#        gzip on;
#
#        # Force runtime resolution by using a variable. That way,
#        # staging2 doesn't have to be running when we start nginx
#        set $staging2 cs-app-staging2;
#        proxy_pass http://$staging2;
#    }
#
#    location = /isaac_error.html {
#        root   /usr/share/nginx/html;
#    }
#
#}


# ISAAC COMPUTER SCIENCE TICKETS
server {
    listen 443 ssl http2;
    server_name tickets.isaaccomputerscience.org;

    include conf/internal-ips-only.conf;
    include conf/headers-proxy.conf;

    location / {
        set $osticket isaac-cs-tickets;
        proxy_pass http://$osticket;
    }

    include conf/location-isaac-cs-error.conf;

    location = /robots.txt {
        add_header Cache-Control "public, max-age=86400";
        alias /usr/share/nginx/html/no-robots.txt;
    }
}
