
user  nginx;
worker_processes  1;

error_log  /dev/stdout error;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server_names_hash_bucket_size 64;

    client_max_body_size 10M;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  125;

    #gzip  on;

    resolver 127.0.0.11 ipv6=off;
    #error_log /var/log/nginx/error.log;
    rewrite_log on;

    proxy_connect_timeout 1s;
    proxy_read_timeout 60s;
    error_page 500 502 503 504 /isaac_error.html;

    # SSL Configuration:
    include ssl.conf;

    # HSTS Header: Remember need for HTTPS for two years, ask browsers to automatically upgrade any subdomains amd allow browser preloading:
    add_header Strict-Transport-Security 'max-age=63072000; includeSubDomains; preload' always;

    # Other useful security headers:
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Xss-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # A man is not dead while his name is still spoken:
    add_header X-Clacks-Overhead "GNU Terry Pratchett" always;


    server {
        listen 80;

        # Rely on a pitfall in nginx headers to remove all other headers
        # except this one. Having a header block prevents inheritance of
        # any other headers, like the HSTS one we don't want in HTTP!
        add_header X-Clacks-Overhead "GNU Terry Pratchett";

        location /.well-known {
            alias /usr/share/nginx/html/.well-known;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name owncloud.isaacscience.org;

        client_max_body_size 75M;

        set $owncloud owncloud;

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;

            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host            $host;

            proxy_pass http://$owncloud;
        }
    }

    server {
        listen 443 ssl;
        server_name docker.isaacscience.org;

        set $auth registry-auth;
        set $registry registry;

        location /auth {
            proxy_pass http://$auth;
        }

        location / {

            # disable any limits to avoid HTTP 413 for large image uploads
            client_max_body_size 0;
            chunked_transfer_encoding on;

            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$" ) {
              return 404;
            }

            proxy_pass http://$registry;
            proxy_set_header  Host              $http_host;   # required for docker client's sake
            proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
            proxy_read_timeout                  900;

        }
    }

    server {
        listen 443 ssl;
        server_name ~^.*isaacchemistry.org$;

        location /book16 {
           # This page won't be ready in time, so use a stand-in for now:
           # return 302 https://isaacphysics.org/books/chemistry_16;
           return 302 https://isaacphysics.org/pages/chem_16_index;
        }

        location /teacher_features {
           return 302 https://isaacphysics.org/teacher_features;
        }

        location /pages/syll_map_chem {
           return 302 https://isaacphysics.org/pages/syll_map_chem;
        }

        location / {
            return 302 https://isaacphysics.org/chemistry;
        }
    }

    server {
        listen 443 ssl;
        server_name www.isaacphysics.org;
        return 301 https://isaacphysics.org$request_uri;
    }

    server {
        listen       443 ssl;

        server_name  ~^(live\.)?isaacphysics\.org$;

        set $env live;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host            $host;

        location /physics_skills_14 {
           return 302 https://isaacphysics.org/books/physics_skills_14;
        }

        # Temporarily add this rule:
        location /gcsebook {
           return 302 https://isaacphysics.org/pages/phys_book_gcse_index;
        }


        location /api {
            proxy_read_timeout 900s;
            proxy_cookie_path /isaac-api /;
            if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
              proxy_pass http://api-$env-$1:8080/isaac-api/$2;
            }
        }

        location / {
            # Force runtime resolution by using a variable. That way,
            # app-<env> doesn't have to be running when we start nginx

            proxy_pass http://app-$env;
        }

        location = /isaac_error.html {
            root   /usr/share/nginx/html;
        }

    }

    server {
        listen       443 ssl;

        server_name  ~(?<env>dev|staging)\.isaacphysics\.org$;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host            $host;

        location /api {

            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 192.30.252.0/22;
            allow 10.0.0.0/8;
            deny all;

            proxy_read_timeout 900s;
            proxy_cookie_path /isaac-api /;
            if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
                proxy_pass http://api-$env-$1:8080/isaac-api/$2;
            }
        }

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;

            # Force runtime resolution by using a variable. That way,
            # app-<env> doesn't have to be running when we start nginx

            proxy_pass http://app-$env;
        }

        location = /isaac_error.html {
            root   /usr/share/nginx/html;
        }

    }

    server {
        listen       443 ssl;

        server_name  test.isaacphysics.org;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host            $host;

        location /api {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
            rewrite    ^/api/([^/]+)/(.*) $2 break;
            proxy_read_timeout 900s;
            proxy_cookie_path /isaac-api /;
            proxy_pass http://api-test-any:8080/isaac-api/$2?$args;
        }

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
            # Force runtime resolution by using a variable. That way,
            # app-<env> doesn't have to be running when we start nginx
            set $env test;
            proxy_pass http://app-$env;
        }

        error_page 502 504 /isaac_test_error.html;

        location = /isaac_error.html {
            root /usr/share/nginx/html;
        }

        location = /isaac_test_error.html {
            root   /usr/share/nginx/html;
        }
    }

    server {
        listen 443 ssl;
        server_name labs.isaacphysics.org;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host            $host;

        # This location is used to allow a demo of the chemistry parser:
        location /chemistry/ {
            # Use a variable for run-time resolution:
            set $chem chemistry-checker;

            # Force all URLs to route to the "/parse_form" endpoint:
            proxy_pass http://$chem:5000/parse_form;
        }

        location / {
            set $labs labs;
            proxy_pass http://$labs:4000;
        }
    }

    server {
        listen 443 ssl;
        server_name tickets.isaacphysics.org;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host            $host;

        location / {
            set $osticket isaac-tickets;
            proxy_pass http://$osticket;
        }
    }

    server {
        listen 443 ssl;
        server_name editor.isaacphysics.org;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host            $host;

        location / {
            set $editor isaac-editor;
            proxy_pass http://$editor;
        }
    }

    server {
        listen 443 ssl default_server;

        location / {
            root   /usr/share/nginx/html;
        }
    }

}
