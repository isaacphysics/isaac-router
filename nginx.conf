
user  nginx;

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections

# Setting worker_processes to auto attempts to create one process per CPU:
worker_processes auto;

error_log  /dev/stdout error;
pid        /var/run/nginx.pid;

# Maximum open file descriptors per process; it must be > worker_connections
# and less than 'ulimit -n' for the underlying operating system:
worker_rlimit_nofile 8192;

events {
    # Allow 8000 * number_of_cpus connections open. This is a lot.
    worker_connections  8000;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server_names_hash_bucket_size 64;

    client_max_body_size 10M;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  125;

    #gzip  on;

    resolver 127.0.0.11 ipv6=off;
    #error_log /var/log/nginx/error.log;
    rewrite_log on;

    proxy_connect_timeout 1s;
    proxy_read_timeout 60s;
    error_page 500 502 503 504 /isaac_error.html;

    # SSL Configuration:
    include ssl.conf;

    # Remove the nginx version from the Server header:
    server_tokens off;

    # Header Configuration:
    include set-headers.conf;

    # HTTP -> HTTPS Redirect & LetsEncrypt
    server {
        listen 80;

        # Rely on a pitfall in nginx headers to remove all other headers
        # except this one. Having a header block prevents inheritance of
        # any other headers, like the HSTS one we don't want in HTTP!
        add_header X-Clacks-Overhead "GNU Terry Pratchett";

        location /.well-known {
            alias /usr/share/nginx/html/.well-known;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }


    # ISAAC PHYSICS LIVE
    server {
        listen       443 ssl;

        server_name  ~^(live\.)?isaacphysics\.org$;

        set $env live;

        include proxy-set-headers.conf;

        location /physics_skills_14 {
           return 302 https://isaacphysics.org/books/physics_skills_14;
        }


        location /api {
            proxy_read_timeout 900s;
            proxy_cookie_path /isaac-api /;

            # Add WebSocket support:
            include websocket-headers.conf;
            include proxy-set-headers.conf;

            if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
              proxy_pass http://api-$env-$1:8080/isaac-api/$2;
            }
        }

        location / {
            # Force runtime resolution by using a variable. That way,
            # app-<env> doesn't have to be running when we start nginx

            proxy_pass http://app-$env;
        }

        location = /isaac_error.html {
            root /usr/share/nginx/html;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            root /usr/share/nginx/html;
        }

    }


    # ISAAC PHYSICS WWW. Redirect
    server {
        listen 443 ssl;
        server_name www.isaacphysics.org;
        return 301 https://isaacphysics.org$request_uri;
    }


    # ISAAC CHEMISTRY
    server {
        listen 443 ssl;
        server_name ~^.*isaacchemistry.org$;

        location /book16 {
           # This page won't be ready in time, so use a stand-in for now:
           # return 302 https://isaacphysics.org/books/chemistry_16;
           return 302 https://isaacphysics.org/pages/chem_16_index;
        }

        location /teacher_features {
           return 302 https://isaacphysics.org/teacher_features;
        }

        location /pages/syll_map_chem {
           return 302 https://isaacphysics.org/pages/syll_map_chem;
        }

        location / {
            return 302 https://isaacphysics.org/chemistry;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            root /usr/share/nginx/html;
        }
    }


    # ISAAC MATHS
    server {
        listen 443 ssl;
        server_name ~^.*isaacmaths.org$;

        location / {
           return 302 https://isaacphysics.org/books/pre_uni_maths;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            root /usr/share/nginx/html;
        }

    }


    # ISAAC PHYSICS STAGING & DEV
    server {
        listen       443 ssl;

        server_name  ~(?<env>dev|staging)\.isaacphysics\.org$;

        include proxy-set-headers.conf;

        location /api {

            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 192.30.252.0/22;
            allow 10.0.0.0/8;
            deny all;

            proxy_read_timeout 900s;
            proxy_cookie_path /isaac-api /;

            # Add WebSocket support:
            include websocket-headers.conf;
            include proxy-set-headers.conf;

            if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
                proxy_pass http://api-$env-$1:8080/isaac-api/$2;
            }
        }

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;

            # Force runtime resolution by using a variable. That way,
            # app-<env> doesn't have to be running when we start nginx

            proxy_pass http://app-$env;
        }

        location = /isaac_error.html {
            root   /usr/share/nginx/html;
        }

    }


    # ISAAC PHYSICS TEST
    server {
        listen       443 ssl;

        server_name  test.isaacphysics.org;

        include proxy-set-headers.conf;

        location /api {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;

            proxy_read_timeout 900s;
            proxy_cookie_path /isaac-api /;

            # Add WebSocket support:
            include websocket-headers.conf;
            include proxy-set-headers.conf;

            if ($request_uri ~* "^/api/([^/]+)/(.*)$") {
                proxy_pass http://api-test-any:8080/isaac-api/$2;
            }

        }

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
            # Force runtime resolution by using a variable. That way,
            # app-<env> doesn't have to be running when we start nginx
            set $env test;
            proxy_pass http://app-$env;
        }

        error_page 502 504 /isaac_test_error.html;

        location = /isaac_error.html {
            root /usr/share/nginx/html;
        }

        location = /isaac_test_error.html {
            root   /usr/share/nginx/html;
        }
    }


    # ISAAC LABS
    server {
        listen 443 ssl;
        server_name labs.isaacphysics.org;

        include proxy-set-headers.conf;

        # This location is used to allow a demo of the chemistry parser:
        location /chemistry/ {
            # Use a variable for run-time resolution:
            set $chem chemistry-checker;

            # Force all URLs to route to the "/parse_form" endpoint:
            proxy_pass http://$chem:5000/parse_form;
        }

        location / {
            set $labs labs;
            proxy_pass http://$labs:4000;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            root /usr/share/nginx/html;
        }
    }


    # ISAAC TICKETS
    server {
        listen 443 ssl;
        server_name tickets.isaacphysics.org;

        include proxy-set-headers.conf;

        location / {
            set $osticket isaac-tickets;
            proxy_pass http://$osticket;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            alias /usr/share/nginx/html/no-robots.txt;
        }
    }


    # ISAAC CDN
    server {
        listen 443 ssl;
        server_name cdn.isaacphysics.org;

        # Ensure important headers not removed by more add_header lines:
        include set-headers.conf;

        # Allow long-term caching of resources:
        etag off;
        add_header Cache-Control "public, max-age=31536000, no-transform";

        # Add CORS header:
        add_header Access-Control-Allow-Origin "*";

        location ~ /\.git { }

        location / {
            root   /var/cdn;
            default_type text/plain;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            alias /usr/share/nginx/html/cdn-robots.txt;
        }
    }


    # ISAAC BOOKS
    server {
        listen 443 ssl;
        server_name  isaacbooks.org www.isaacbooks.org;

        location / {
            # Need a different set of proxy headers to the other servers:
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host www.isaacbooks.org;

            proxy_pass http://ws3.cta.phy.cam.ac.uk;
        }
    }


    # CAVENDISH QUANTUM
    server {
        listen 443 ssl;
        server_name  www.cavendish-quantum.org.uk;

        location / {
            # Need a different set of proxy headers to the other servers:
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host www.cavendish-quantum.org.uk;

            proxy_pass http://ws3.cta.phy.cam.ac.uk;
        }
    }


    # ISAAC EDITOR
    server {
        listen 443 ssl;
        server_name editor.isaacphysics.org;

        include proxy-set-headers.conf;

        location / {
            set $editor isaac-editor;
            proxy_pass http://$editor;
        }

        location = /robots.txt {
            add_header Cache-Control "public, max-age=86400";
            alias /usr/share/nginx/html/no-robots.txt;
        }
    }


    # ISAAC MONITOR
    server {
        listen       443 ssl;
        server_name  monitor.isaacphysics.org;

        include proxy-set-headers.conf;

        set $grafana grafana:3000;

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;

            proxy_pass http://$grafana;
        }
    }


    # OWNCLOUD
    server {
        listen 443 ssl;
        server_name owncloud.isaacscience.org;

        client_max_body_size 150M;
        include proxy-set-headers.conf;

        set $owncloud owncloud;

        location / {
            allow 128.232.0.0/16;
            allow 131.111.0.0/16;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;

            proxy_pass http://$owncloud;
        }
    }


    # DOCKER
    server {
        listen 443 ssl;
        server_name docker.isaacscience.org;

        set $auth registry-auth;
        set $registry registry;

        location /auth {
            proxy_pass http://$auth;
        }

        location / {

            # Disable any limits to avoid HTTP 413 for large image uploads:
            client_max_body_size 0;
            chunked_transfer_encoding on;

            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$" ) {
                return 404;
            }

            proxy_pass http://$registry;
            proxy_set_header  Host              $http_host;   # required for docker client's sake
            proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
            proxy_read_timeout                  900;

        }
    }


    # DEFAULT SERVER
    server {
        listen 443 ssl default_server;

        location / {
            root   /usr/share/nginx/html;
        }
    }

}
